from typing import List

from domain.models import Powerplant, Fuel, PowerOutput


class ProductionPlanService:
    """Production Plan Service handler"""
    def __init__(self, load: float, fuels: Fuel, powerplants: List[Powerplant], include_co2: bool = False):
        self.load = load
        self.fuels = fuels
        self.powerplants = powerplants
        self.include_co2 = include_co2
        self.calculate_plant_costs()

    def calculate_plant_costs(self):
        """Calculates cost per plant"""
        for plant in self.powerplants:
            plant.calculate_cost(self.fuels, self.include_co2)

    def generate_plan(self) -> List[PowerOutput]:
        """Generates production plan"""
        # sorts plants based on cost from cheapest to most expensive
        sorted_plants = sorted(self.powerplants, key=lambda p: p.cost)
        remaining_load = self.load
        result = []

        for plant in sorted_plants:
            if plant.type == "windturbine":
                # calculates the wind turbine's maximum power (pmax) 
                # by the actual wind availability. Dividing by 100 converts
                # this percentage into a decimal.
                # TODO: parametrize this value
                available_power = plant.pmax * (self.fuels.wind / 100)
            else:
                available_power = plant.pmax

            # checks if thereâ€™s still load left to be supplied.
            if remaining_load > 0:
                # makes sure the plant generates enough power to meet its minimum requirement
                # without exceeding the load needed or its maximum available power.
                generation = max(plant.pmin, min(available_power, remaining_load))
                # rounds the generation value to one decimal place for precision.
                result.append(PowerOutput(name=plant.name, p=round(generation, 1)))
                # After allocating power from the current plant, the remaining load is reduced by
                # the amount of power just generated by this plant.
                remaining_load -= generation
            else:
                # no additional power is needed from this plant
                result.append(PowerOutput(name=plant.name, p=0.0))

        total_generated = sum(output.p for output in result)
        if total_generated < self.load:
            raise ValueError("Unable to meet the required energy load with given powerplants")

        return result
